package com.deleidos.dmf.analyzer;

import java.io.IOException;
import java.util.UUID;

import org.json.JSONArray;
import org.json.JSONObject;

import com.deleidos.dmf.exception.AnalyticsTikaProfilingException;
import com.deleidos.dmf.exception.AnalyticsUndetectableTypeException;
import com.deleidos.dmf.exception.AnalyticsUnsupportedParserException;
import com.deleidos.dmf.exception.AnalyzerException;
import com.deleidos.dmf.framework.TikaSampleAnalyzerParameters;
import com.deleidos.dmf.framework.TikaSchemaAnalyzerParameters;
import com.deleidos.dp.exceptions.DataAccessException;

/**
 * 
 * Performs various services on files to determine their type, format and parsing functions.
 *
 */
public interface FileAnalyzer extends Analyzer<TikaSampleAnalyzerParameters, TikaSchemaAnalyzerParameters> {

	/**
	 * Give a source with all necessary parameters for progress bar and web socket functionality.
	 * @param sampleFilePath the fully qualified path of the sample file
	 * @param domainName a lower case string of the desired domain name
	 * @param tolerance a lower case string of the desired tolerance
	 * @param sessionId the session id generated by the front end
	 * @param sampleNumber the index (starting at 0) of the sample in the array
	 * @param totalNumberSamples the length of the sample array
	 * @return the guid generated that is associated with the sample
	 * @throws IOException thrown in the file path cannot be found or is not readable
	 * @throws AnalyticsUndetectableTypeException thrown if the source's type cannot be determined
	 * @throws AnalyticsUnsupportedParserException thrown if the type is determined, 
	 * 	but there is not an analytics parser that can handle this type  
	 * @throws AnalyzerException if there is an unspecified error while analyzing the sample
	 * @throws DataAccessException if a required service (H2 or IE) could not provide necessary data
	 */
	public String analyzeSample(String sampleFilePath, String domainName, String tolerance,
			String sessionId, int sampleNumber, int totalNumberSamples) 
			throws IOException, AnalyzerException, DataAccessException;
	
	/**
	 * Retrieve the proposed schema object based on the source analysis objects.  
	 * Run schema analysis pass on data samples.
	 * Session ID required for progress bar.
	 * @param existingSchemaGuid the existing schema guid with which to merged the source analysis
	 * @param domainName the name of the domain to attempt to use
	 * @param editedSourceAnalysis the array of sample object with user defined merges
	 * @param sessionId the session id used to generate the array
	 * @return The JSON representation of the proposed schema.
	 * @throws AnalyzerException exception thrown if there is an unspecified error analyzing the schema
	 * @throws DataAccessException thrown if the backend has an error accessing necessary data
	 */
	public JSONObject analyzeSchema(String existingSchemaGuid, String domainName, JSONArray editedSourceAnalysis, String sessionId) 
			throws IOException, AnalyzerException, DataAccessException;

	public JSONObject analyzeSchema(JSONObject schemaAndSampleList, String domainName, String sessionId) throws IOException, AnalyzerException, DataAccessException;
		
}
