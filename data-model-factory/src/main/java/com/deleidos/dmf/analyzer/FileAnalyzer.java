package com.deleidos.dmf.analyzer;

import java.io.IOException;
import java.util.UUID;

import org.json.JSONArray;
import org.json.JSONObject;

import com.deleidos.dmf.exception.AnalyticsTikaProfilingException;
import com.deleidos.dmf.exception.AnalyticsUndetectableTypeException;
import com.deleidos.dmf.exception.AnalyticsUnsupportedParserException;
import com.deleidos.dmf.framework.TikaSampleProfilableParameters;
import com.deleidos.dmf.framework.TikaSchemaProfilableParameters;

/**
 * 
 * Performs various services on files to determine their type, format and
 * parsing functions.
 *
 */
public interface FileAnalyzer extends Analyzer<TikaSampleProfilableParameters, TikaSchemaProfilableParameters> {

	/**
	 * Give a source with all necessary parameters for progress bar and web socket functionality.
	 * @param sampleFilePath the fully qualified path of the sample file
	 * @param domainName a lower case string of the desired domain name
	 * @param tolerance a lower case string of the desired tolerance
	 * @param sessionId the session id generated by the front end
	 * @param sampleNumber the index (starting at 0) of the sample in the array
	 * @param totalNumberSamples the length of the sample array
	 * @return the guid generated that is associated with the sample
	 * @throws IOException thrown in the file path cannot be found or is not readable
	 * @throws AnalyticsUndetectableTypeException thrown if the source's type cannot be determined
	 * @throws AnalyticsUnsupportedParserException thrown if the type is determined, 
	 * 	but there is not an analytics parser that can handle this type  
	 */
	public String giveSource(String sampleFilePath, String domainName, String tolerance,
			String sessionId, int sampleNumber, int totalNumberSamples) 
			throws IOException, AnalyticsUndetectableTypeException, AnalyticsUnsupportedParserException;
	
	/**
	 * Retrieve source analysis for a single sample.
	 * @param guid The guid of the sample.
	 * @return A JSON Object that 
	 */
	public JSONObject retrieveSourceAnalysis(String guid);
	
	/**
	 * Retrieve the analysis of a group of samples.
	 * @param sampleGuids The list of sample guids that should be analyzed.
	 * @return A JSON representation of the automatically detected (but not finalized) schema.  Includes "merged-into" and "used-in-schema" flags.
	 */
	public JSONArray retrieveSourceAnalysis(String[] sampleGuids);
	
	/**
	 * Retrieve the proposed schema object based on the source analysis objects.  
	 * Run schema analysis pass on data samples.
	 * Session ID required for progress bar.
	 * @param editedSourceAnalysis the array of sample object with user defined merges
	 * @param sessionId the session id used to generate the array
	 * @return The JSON representation of the proposed schema.
	 * @throws AnalyticsTikaProfilingException exception thrown if there is an error profiling the schema
	 */
	public JSONObject retrieveSchemaAnalysis(JSONArray editedSourceAnalysis, String sessionId) throws AnalyticsTikaProfilingException;
	
	/**
	 * Method to process a schema JSON Object and load it into the backend database.
	 * @param schemaJson The JSON representation of the schema that the user has finalized.
	 * @return The guid of the schema.
	 */
	public String giveSchema(JSONObject schemaJson);
	
	public static String generateUUID() {
		return UUID.randomUUID().toString();
	}
}
