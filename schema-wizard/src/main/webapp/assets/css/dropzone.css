/**
 * For the correct positioning of the placeholder element, the dnd-list and
 * it's children must have position: relative
 */
.drag-drop ul[dnd-list],
.drag-drop ul[dnd-list] > li {
	position: relative;
}

/**
 * The dnd-list should always have a min-height,
 * otherwise you can't drop to it once it's empty
 */
.drag-drop ul[dnd-list] {
    min-height: 42px;
    padding-left: 0px;
}

.drag-drop td .dndDraggingSource {
    /**
     * The dndDraggingSource class will be applied to
     * the source element of a drag operation.
     */
    background-color: lightsalmon;
}

/**
 * Show dropzones in different colors
 */
#dropzone-1 .dndDragging {
    background-color: aliceblue;
}
#dropzone-2 .dndDragging {
    background-color: lightsteelblue;
}
#dropzone-3 .dndDragging {
    background-color: thistle;
}
/**
 * Show selected elements in same color as their dropzone
 */
#data-sources-table li.selected1 {
    background-color: aliceblue;
}
#data-sources-table li.selected2 {
     background-color: lightsteelblue;
}
#data-sources-table li.selected3 {
    background-color: thistle;
}
#details-title {
    color: black;
    background-color: gold;
}
#details1-title {
    color: black;
    background-color: gold;
}
#details2-title {
    color: black;
    background-color: lightsalmon;
}
/**
 * An element with .dndPlaceholder class will be
 * added to the dnd-list while the user is dragging
 * over it.
 */
.drag-drop ul[dnd-list] .dndPlaceholder {
    display: block;
    background-color: #ddd;
    min-height: 42px;
}

/**
 * The dnd-lists's child elements currently MUST have
 * position: relative. Otherwise we can not determine
 * whether the mouse pointer is in the upper or lower
 * half of the element we are dragging over. In other
 * browsers we can use event.offsetY for this.
 */
.drag-drop ul[dnd-list] li {
    background-color: #fff;
    border: 1px solid #ddd;
    border-top-right-radius: 4px;
    border-top-left-radius: 4px;
    display: block;
    padding: 10px 15px;
    margin-bottom: -1px;
}
